        System.out.println("Part 4");

        ArrayList<ChapterMembers.Member> members = ChapterMembers.getDataset();

        // Print all the names
        members.stream().forEach(x -> System.out.println(x.getName()));

        // Calculate the total number of cookies and print it
        int totalCookies = members.stream()
                .mapToInt(x -> x.getCookies().get())
                .sum();

        System.out.println("Total number of cookies is: " + totalCookies);

        // Filter on members with a pet, sort them based on squad name and print their name
        members.stream()
                .filter(x -> x.isHasPets())
                .sorted((x, y) -> x.getSquad().compareTo(y.getSquad()))
                .forEach(x -> System.out.println("Name: " + x.getName()));

        // Sort on name, delete members with an odd id and print the favorite animals
        members.stream()
                .sorted((x, y) -> x.getName().compareTo(y.getName()))
                .filter(x -> x.getId() % 2 != 0)
                .forEach(x -> System.out.println("Favorite animal: " + x.getAnimal().orElse(ChapterMembers.FavoriteAnimal.NONE)));

        // Double all the id's, remove members without animals, divide all the numbers of cookies by 14 and print these as floating values
        members.stream()
                .map(x -> {
                    int doubleId = x.getId()*2;
                    return new ChapterMembers.Member(x.getName(), x.getSquad(), doubleId, x.getCookies().get(), x.getAnimal().orElse(null), x.isHasPets());
                })
                .forEach(x -> {
                    System.out.println("Name: " + x.getName());
                    float cookies = (float) x.getCookies().get()/14;
                    System.out.println("Number of cookies: " + cookies);
                });